When writing this program, we have to begin knowing that we don't know a lot of necessary information. First, we don't know how many total files the user has to process. Second, we don't know how many total lines are in each one of those files, and third, we don't know the kinds of variables we'll get from the lines in each file. Overall, this program will take a file from a user, count how many number of lines are in it, separtate the two pieces of data in each line, format it appropriately and give us the partial total number of lines in the file and the partial total distance per each runner in the file. But tt is important that we keep in mind each one of the unknowns mentioned.

The first part of the program, then, is dedicatated to defining the two variables, printKV and processFile. PrintKV is the king of how we will format the output of the program. It checks for the type of value first, using an if/elif statement to decipher between strings, floats and integers. It also defines how long the strings and keys will be when they print.

Next is the processFile function which counts, formats and labels the lines in each file. By defining the partial variables and then using a for loop to run through each line of the file, the function takes each line, reads it, splits it at the comma, gets rid of the white space at the end of the line and presents it to the printKV function for formatting.

Finally, using a similar methond to the processFile's for loop, we define the total variables and use a while loop to run a second file and keep the program running indefinitely. At the end of this section, we print out all of the results.